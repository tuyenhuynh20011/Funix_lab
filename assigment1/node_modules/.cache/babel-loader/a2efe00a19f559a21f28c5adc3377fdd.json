{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n\n  var warning = require('fbjs/lib/warning');\n\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\n  var loggedTypeFailures = {};\n}\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\n\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          var stack = getStack ? getStack() : '';\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;","map":{"version":3,"names":["process","env","NODE_ENV","invariant","require","warning","ReactPropTypesSecret","loggedTypeFailures","checkPropTypes","typeSpecs","values","location","componentName","getStack","typeSpecName","hasOwnProperty","error","ex","Error","message","stack","module","exports"],"sources":["C:/Users/ASUS/Documents/GitHub/Funix_lab/assigment1/node_modules/prop-types/checkPropTypes.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n  var warning = require('fbjs/lib/warning');\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzC,IAAIC,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;EACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;EACA,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,4BAAD,CAAlC;;EACA,IAAIG,kBAAkB,GAAG,EAAzB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CC,QAA3C,EAAqDC,aAArD,EAAoEC,QAApE,EAA8E;EAC5E,IAAIb,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,KAAK,IAAIY,YAAT,IAAyBL,SAAzB,EAAoC;MAClC,IAAIA,SAAS,CAACM,cAAV,CAAyBD,YAAzB,CAAJ,EAA4C;QAC1C,IAAIE,KAAJ,CAD0C,CAE1C;QACA;QACA;;QACA,IAAI;UACF;UACA;UACAb,SAAS,CAAC,OAAOM,SAAS,CAACK,YAAD,CAAhB,KAAmC,UAApC,EAAgD,sEAAsE,8CAAtH,EAAsKF,aAAa,IAAI,aAAvL,EAAsMD,QAAtM,EAAgNG,YAAhN,EAA8N,OAAOL,SAAS,CAACK,YAAD,CAA9O,CAAT;UACAE,KAAK,GAAGP,SAAS,CAACK,YAAD,CAAT,CAAwBJ,MAAxB,EAAgCI,YAAhC,EAA8CF,aAA9C,EAA6DD,QAA7D,EAAuE,IAAvE,EAA6EL,oBAA7E,CAAR;QACD,CALD,CAKE,OAAOW,EAAP,EAAW;UACXD,KAAK,GAAGC,EAAR;QACD;;QACDZ,OAAO,CAAC,CAACW,KAAD,IAAUA,KAAK,YAAYE,KAA5B,EAAmC,oEAAoE,+DAApE,GAAsI,iEAAtI,GAA0M,gEAA1M,GAA6Q,iCAAhT,EAAmVN,aAAa,IAAI,aAApW,EAAmXD,QAAnX,EAA6XG,YAA7X,EAA2Y,OAAOE,KAAlZ,CAAP;;QACA,IAAIA,KAAK,YAAYE,KAAjB,IAA0B,EAAEF,KAAK,CAACG,OAAN,IAAiBZ,kBAAnB,CAA9B,EAAsE;UACpE;UACA;UACAA,kBAAkB,CAACS,KAAK,CAACG,OAAP,CAAlB,GAAoC,IAApC;UAEA,IAAIC,KAAK,GAAGP,QAAQ,GAAGA,QAAQ,EAAX,GAAgB,EAApC;UAEAR,OAAO,CAAC,KAAD,EAAQ,sBAAR,EAAgCM,QAAhC,EAA0CK,KAAK,CAACG,OAAhD,EAAyDC,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,EAAjF,CAAP;QACD;MACF;IACF;EACF;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBd,cAAjB"},"metadata":{},"sourceType":"script"}