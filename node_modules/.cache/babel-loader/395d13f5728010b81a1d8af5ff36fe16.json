{"ast":null,"code":"/**\n * Devuelve el número especificado formateado con los separadores especificados.\n *\n * @param {Number}  value            Valor a formatear.\n * @param {Object}  config           Configuración para modificar el resultado.\n * @param {String}  config.decimal   Símbolo a usar para el punto decimal (`,` por defecto).\n * @param {Number}  config.precision Número de dígitos decimales a mostrar (`2` por defecto).\n * @param {String}  config.thousands Separador de miles ('.' por defecto).\n *\n * @return {String} Número formateado.\n */\nmodule.exports = function FormatDecimal(value, config) {\n  if (!Number.isFinite(value)) {\n    throw new TypeError(`You MUST specify a finite number, not [${typeof value} = ${value}]`);\n  }\n\n  if (!config) {\n    config = {};\n  } //------------------------------------------------------------------------------\n  // Configuración del resultado.\n  //------------------------------------------------------------------------------\n\n\n  var _decimal = typeof config.decimal === 'string' ? config.decimal : ',';\n\n  var _precision = typeof config.precision === 'number' ? config.precision : 2;\n\n  var _thousands = typeof config.thousands === 'string' ? config.thousands : '.'; //------------------------------------------------------------------------------\n  // Obtención del resultado.\n  //------------------------------------------------------------------------------\n\n\n  var _parts = value.toFixed(_precision).split('.');\n\n  _parts[0] = _parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, _thousands); //\n\n  return _parts.join(_decimal);\n};","map":{"version":3,"sources":["C:/Users/ASUS/Documents/GitHub/FunixReactJS/node_modules/format-decimal/index.js"],"names":["module","exports","FormatDecimal","value","config","Number","isFinite","TypeError","_decimal","decimal","_precision","precision","_thousands","thousands","_parts","toFixed","split","replace","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,MAA9B,EACjB;AACI,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBH,KAAhB,CAAL,EACA;AACI,UAAM,IAAII,SAAJ,CAAe,0CAAyC,OAAOJ,KAAM,MAAKA,KAAM,GAAhF,CAAN;AACH;;AACD,MAAI,CAACC,MAAL,EACA;AACIA,IAAAA,MAAM,GAAG,EAAT;AACH,GARL,CASI;AACA;AACA;;;AACA,MAAII,QAAQ,GAAK,OAAOJ,MAAM,CAACK,OAAd,KAA0B,QAA1B,GACXL,MAAM,CAACK,OADI,GAEX,GAFN;;AAGA,MAAIC,UAAU,GAAG,OAAON,MAAM,CAACO,SAAd,KAA4B,QAA5B,GACXP,MAAM,CAACO,SADI,GAEX,CAFN;;AAGA,MAAIC,UAAU,GAAG,OAAOR,MAAM,CAACS,SAAd,KAA4B,QAA5B,GACXT,MAAM,CAACS,SADI,GAEX,GAFN,CAlBJ,CAqBI;AACA;AACA;;;AACA,MAAIC,MAAM,GAAGX,KAAK,CAACY,OAAN,CAAcL,UAAd,EAA0BM,KAA1B,CAAgC,GAAhC,CAAb;;AACAF,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAaA,MAAM,CAAC,CAAD,CAAN,CAAUG,OAAV,CAAkB,uBAAlB,EAA2CL,UAA3C,CAAb,CAzBJ,CA0BI;;AACA,SAAOE,MAAM,CAACI,IAAP,CAAYV,QAAZ,CAAP;AACH,CA7BD","sourcesContent":["/**\n * Devuelve el número especificado formateado con los separadores especificados.\n *\n * @param {Number}  value            Valor a formatear.\n * @param {Object}  config           Configuración para modificar el resultado.\n * @param {String}  config.decimal   Símbolo a usar para el punto decimal (`,` por defecto).\n * @param {Number}  config.precision Número de dígitos decimales a mostrar (`2` por defecto).\n * @param {String}  config.thousands Separador de miles ('.' por defecto).\n *\n * @return {String} Número formateado.\n */\nmodule.exports = function FormatDecimal(value, config)\n{\n    if (!Number.isFinite(value))\n    {\n        throw new TypeError(`You MUST specify a finite number, not [${typeof value} = ${value}]`);\n    }\n    if (!config)\n    {\n        config = {};\n    }\n    //------------------------------------------------------------------------------\n    // Configuración del resultado.\n    //------------------------------------------------------------------------------\n    var _decimal   = typeof config.decimal === 'string'\n        ? config.decimal\n        : ',';\n    var _precision = typeof config.precision === 'number'\n        ? config.precision\n        : 2;\n    var _thousands = typeof config.thousands === 'string'\n        ? config.thousands\n        : '.';\n    //------------------------------------------------------------------------------\n    // Obtención del resultado.\n    //------------------------------------------------------------------------------\n    var _parts = value.toFixed(_precision).split('.');\n    _parts[0]  = _parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, _thousands);\n    //\n    return _parts.join(_decimal);\n};\n"]},"metadata":{},"sourceType":"script"}